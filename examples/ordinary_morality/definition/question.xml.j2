<HTMLQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd">
  <HTMLContent>
    <!DOCTYPE html>
    <html>

    <head>
      <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />
      <script type='text/javascript' src='https://s3.amazonaws.com/mturk-public/externalHIT_v1.js'></script>

      <!-- You must include this JavaScript file -->
      <script src="https://assets.crowd.aws/crowd-html-elements.js"></script>
      <style type="text/css">
        form {
          margin: auto;
          width: 75%;
        }

        hr {
          border-top: 1px solid #ec7211;
        }

        ul {
          list-style: none;
          padding: 0;
          margin: 30px 0 0 0;
          text-align: right;
        }

        .questionBody {
          margin: 0 0 30px 50px;
        }

        .button {
          background-color: #ec7211;
          border-radius: 2px;
          font-size: 12px;
          font-weight: bold;
          color: #ffffff;
          padding: 4.8px 22.4px 4.8px 22.4px;
          cursor: pointer;
          max-width: 100px;
          margin-bottom: 5px;
          text-align: center;
        }

        .inspiration {
          float: right;
          margin-bottom: 0;
        }

        #warning {
          color: red;
          padding-left: 5px;
        }

        .morallyWrong {
          border: 1px solid red;
          border-radius: 5px;
          padding: 5px;
          margin: 10px 0 10px 0;
        }

        .morallyCorrect {
          border: 1px solid green;
          border-radius: 5px;
          padding: 5px;
          margin: 10px 0 10px 0
        }

        .buttonContainer {
          width: 100%;
        }

        .buttonAndContentContainer {
          width: 50%;
          float: left;
          min-height: 100px;
        }
      </style>
      <script>
        function damerau_levenshtein(source, target) {
          if (!source) return target ? target.length : 0;
          else if (!target) return source.length;

          var m = source.length, n = target.length, INF = m + n, score = new Array(m + 2), sd = {};
          for (var i = 0; i < m + 2; i++) score[i] = new Array(n + 2);
          score[0][0] = INF;
          for (var i = 0; i <= m; i++) {
            score[i + 1][1] = i;
            score[i + 1][0] = INF;
            sd[source[i]] = 0;
          }
          for (var j = 0; j <= n; j++) {
            score[1][j + 1] = j;
            score[0][j + 1] = INF;
            sd[target[j]] = 0;
          }

          for (var i = 1; i <= m; i++) {
            var DB = 0;
            for (var j = 1; j <= n; j++) {
              var i1 = sd[target[j - 1]],
                j1 = DB;
              if (source[i - 1] === target[j - 1]) {
                score[i + 1][j + 1] = score[i][j];
                DB = j;
              }
              else {
                score[i + 1][j + 1] = Math.min(score[i][j], Math.min(score[i + 1][j], score[i][j + 1])) + 1;
              }
              score[i + 1][j + 1] = Math.min(score[i + 1][j + 1], score[i1] ? score[i1][j1] + (i - i1 - 1) + 1 + (j - j1 - 1) : Infinity);
            }
            sd[source[i - 1]] = i;
          }
          return score[m + 1][n + 1];
        }
      </script>
    </head>

    <body>
      <!-- You must include crowd-form so that your task submits answers to MTurk -->
      <crowd-form answer-format="flatten-objects">
        <div class="formContainer">
          <crowd-instructions link-text="View instructions" link-type="button">
            <short-summary>
              <p>Collect utterances for intent</p>
            </short-summary>

            <detailed-instructions>
              <h3>Collect utterances for intent</h3>
              <p>
                Given a context and an intent, write how you would express the intent using natural language.
                Don't try to be overly formal, simply write what you would say if you were in the given situation.
              </p>
            </detailed-instructions>

            <positive-example>
              <h3>Context</h3>
              <p>You bought a pair of shoes online but they don't fit</p>

              <h3>Intent</h3>
              <p>You want to try to return the shoes via an online customer service chat bot</p>

              <h3>Response</h3>
              <p>I would like to return a pair of shoes</p>
            </positive-example>

            <positive-example>
              <h3>Context</h3>
              <p>You bought a pair of shoes online but they don't fit</p>

              <h3>Intent</h3>
              <p>You want to try to return the shoes via an online customer service chat bot</p>

              <h3>Response</h3>
              <p>Hi, I'm trying to buy a plane ticket for tomorrow morning and your website isn't working</p>
            </positive-example>

            <negative-example>
              <h3>Context</h3>
              <p>You bought a pair of shoes online but they don't fit</p>

              <h3>Intent</h3>
              <p>You want to try to return the shoes via an online customer service chat bot</p>

              <h3>Response</h3>
              <p>Don't fit</p>
            </negative-example>
          </crowd-instructions>

          <section class="questionBody">
            <p>Write a scenario where someone does something clearly wrong according to common everyday, ordinary moral
              standards. Write a scenario where someone does something morally permissible. Make sure the two scenarios
              are similarly worded and not completely different sentences.</p>

            <!-- Your contexts and intents will be substituted for the "context" and "intent" variables when you
                  publish a batch with an input file containing multiple contexts and intents
                <p><strong>Context: </strong>${context}</p>
                <p><strong>Intent: </strong>${intent}</p>-->
            <div class="inputContainer">
              <div class="morallyWrong">
                <crowd-input name="wrong" placeholder="Type morally wrong action here..." required></crowd-input>
              </div>
              <div class="morallyCorrect">
                <crowd-input name="not_wrong" placeholder="Type a not morally wrong action here..." required>
                </crowd-input>
              </div>
            </div>

            <div class="buttonContainer">
              <div class="buttonAndContentContainer">
                <div class="button verifyme">
                  Verify
                </div>
              </div>

              <div class="buttonAndContentContainer">
                <div class="button inspiration">
                  Get Inspiration
                </div>
              </div>
            </div>
          </section>

        </div>
      </crowd-form>

      <script>
        var inputContainer = document.querySelector('.inputContainer');

        function verify(event) {
          var parentElement = event.srcElement.parentNode;
          // Amazon adds this field themselves. We have no direct access to it from our code other than traversing the DOM.
          // One can also do 'document.querySelector('crowd-input'), however there may be 
          // more than two for some forms, so this approach is more scalable.
          var inputVal1 = inputContainer.children[0].children[0].value;
          var inputVal2 = inputContainer.children[1].children[0].value;
          var similarFloat = damerau_levenshtein(inputVal1, inputVal2) / (0.5 * (inputVal1.length + inputVal2.length));

          let warningInnerHTML;
          let warningMessage = document.getElementById('warning');
          if (warningMessage) {
            warningMessage.remove();
          }
          warningMessage = document.createElement('span');
          warningMessage.setAttribute('id', 'warning');

          if (similarFloat === 0.0) {
            warningInnerHTML = 'Those sentences are too similar. Please adjust.';
          } else if (similarFloat >= 0.55) {
            warningInnerHTML = 'Those sentences are too dissimilar. Please adjust.';
          } else if (inputVal1.length === 0 && inputVal1.length === 0) {
            warningInnerHTML = 'Please enter valid sentences.';
          } else {
            document.querySelector('crowd-button').disabled = false;
          }
          if (warningInnerHTML) {
            warningMessage.appendChild(document.createTextNode(warningInnerHTML));
            parentElement.appendChild(warningMessage);
            document.querySelector('crowd-button').disabled = true;
          }
        }

        function getInspiration(event) {
          var parentElement = event.srcElement.parentNode;
          var verbs = ['twist', 'run', 'broke', 'paid', 'sang'];
          var nouns = ['car', 'money', 'computer', 'dog'];
          var phrases = [
            'in the country side',
            'to the school',
            'at the art show',
          ];
          var inspiration = [
            verbs[Math.floor(Math.random() * verbs.length)],
            nouns[Math.floor(Math.random() * nouns.length)],
            phrases[Math.floor(Math.random() * phrases.length)],
          ];
          let ul = document.querySelector('ul');
          if (ul) {
            ul.remove();
          }
          ul = document.createElement('ul');
          for (ele of inspiration) {
            var li = document.createElement('li');
            li.innerHTML = ele;
            ul.appendChild(li);
          }
          parentElement.appendChild(ul);
        }

        // Add listeners to "Verify" button
        document.querySelector('.verifyme').addEventListener('click', verify);

        // Add listeners to "Inspiration" button
        document.querySelector('.inspiration').addEventListener('click', getInspiration);

        // Shuffle Right and Wrong Inputs
        for (var i = inputContainer.children.length; i >= 0; i--) {
          inputContainer.appendChild(inputContainer.children[Math.random() * i | 0]);
        }

        // Traverse DOM for dynamically inserted Submit button to disable
        function disable() {
          document.querySelector('crowd-button').disabled = true;
        }
        setTimeout(disable, 3000);

      </script>
    </body>
    </html>
  </HTMLContent>
</HTMLQuestion>